ARRAY:
funciona como contenedor de almacenamiento para agrupar datos del mismo tipo, que se almacenan en posiciones consecutivas.
Para construir un array se debe declarar una variable y establecerla en [], luego podemos agregar el contenedor separados por coma tantas cadenas, numeros o booleanos como queremos y acceder a estos elementos cuando deseamos.

Ej:  const nombresEstudiantes = [ 'Martin', 'Antonio', 'Sara', 'Samuel'];

Array tiene varios metodos incorporados, uno de ellos es:
.length al igual que en la cadena .length cuenta los caracteres, el .length devolvera el numero de los elementos de un array:

Ej: const nombresEstudiantes = ['Martin', 'Antonio', 'Sara', 'Samuel]Â´;
      console.log(nombresEstudiantes.length); ||4



-Acceso a un elemento de un array:

Podemos acceder a un elemento de un array en cualquier momento, solo nececitamos llamar al elemento por su posicion en el array. Los elementos reciben una posicion numerica de acuerdo a su ubicacion en el array.
El orden numerico siempre comienza en cero por lo que el primer elemento esta en indice 0, el segundo en el indice 1, el tercero en el indice 2, y asi sucesivamente.

Ej: const nombresEstudiantes= ['Martin', 'Antonio', 'Sara', 'Samuel'];
                                0          1           2        3

# Para acceder al elemento escribimos el nombre de la variable del array, seguido de corchetes que contienen la asignacion numerica.

Ej: const nombres.Estudiantes = ['Martin', 'Antonio', Sara', 'Samuel'];
     console.log(nombres.Estudiantes[1]); ||Antonio


# Para acceder al ultimo numero del array utilizamos el metodo .length.
En nuestro arreglo nombresEstudiantes, la longitud es 4. Sabemos que el mprimer elemento SIEMPRE sera cero(0), y cada elemento posterior se desplaza un numero.
En nuestro ejemplo, el ultimo elemento tiene un indice de 3. Usando la propiedad de longitud mostramos como se hace cuando no sabemos el numero de elementois de un arreglo:

Ej:  const nombresEstudiantes = ['Martin', 'Antonio', 'Sara', ...,'Samuel'];
      console.log(nombresEstudiantes [nombresEstudiantes.length - 1]); ||'Samuel'


- Asignacion:

Podemos asignar y re asignar cualquier indice en el array, usando el parentesis / indice y un "=".

Ej:  const nombres.Estudiantes =[ 'Martin', 'Antonio', 'Sara', 'Samuel']; 
       nombresEstudiantes[0]= 'Jorge'
       console.log ( nombresEstudiantes); ||[ 'Jorge', 'Antonio', 'Sara', 'Samuel']


- .push y .prop
Son metodos que se refiere a la adicion y eliminacion de elementos del array, despues de su declaracion inicial.
 
.push : agrega un elemento al final del arreglo, incrementando su longitud en 1. 
.push devuelve la longitud nueva.

Ej: const nombresEstudiantes=[ 'Martin', 'Antonio', 'Sara', 'Samuel'];
      nombresEstudiantes.push('Patricia');
      console.log(nombresEstudiantes); || ['Martin', 'Antonio', 'Sara', 'Samuel', 'Patricia']


.pop : elimina el ultimo elemento del arreglo, disminuyendo el arreglo en 1.
.pop devuelve el elemento "reventado" (popped) 

Ej: const nombresEstudiantes= ['Martin', 'Antonio', 'Sara', 'Samuel'];
     nombresEstudiantes.pop();
     console.log( nombresEstudiantes); || [ 'Martin', 'Antonio', 'Sara']


 - .unshift y . shift 
 son dos metodos que funcionan exactamente igual que .push y .pop, excepto que operan en el primer elemento del arreglo.
 .unshift(item) colocara un nuevo elemento en la primera posicion del arrray.
 .shift()  eliminara el primer elemento de la matriz.

 Ej: const nombresEstudiantes= ['Martin', 'Antonio', 'Sara', 'Samuel'];
      nombresEstudiantes.unshift('Leo');
      console.log(nombres.Estudiantes); || ['Leo', 'Martin', 'Antonio', Sara', 'Samuel']

      nombresEstudiantes.shift();
      console.log (nombresEstudiantes); || ['Martin', 'Antonio', 'Sara', 'Samuel']

      -Utilizando bucles for en array

      La mayoria de las veces, los bucles for se utilizan para iterar sobre todos los elementos de un array.
      Usando mla tecnica de acceso al indice podemos acceder a cada elemento del array.
      Para hacer esto usamos el metodo .length como punto de parada para el ciclo.

      Ej:  const nombresEstudiantr = ['Martin', 'Antonio', 'Sara', 'Samuel'];
      for ( let i= 0; i < nombresEstudiantes.length; i++)
      }
     // 'Martin'
     //'Antonio'
     //Sara'
     //'Samuel'
      
